module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.28.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateEducation {
  count: Int!
}

type AggregateGeneral {
  count: Int!
}

type AggregateHobby {
  count: Int!
}

type AggregateJob {
  count: Int!
}

type AggregateLanguage {
  count: Int!
}

type AggregateResume {
  count: Int!
}

type AggregateSkill {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Education {
  fieldOfStudy: String!
  dateEnded: String!
  name: String!
  location: String!
}

type EducationConnection {
  pageInfo: PageInfo!
  edges: [EducationEdge]!
  aggregate: AggregateEducation!
}

input EducationCreateInput {
  fieldOfStudy: String!
  dateEnded: String!
  name: String!
  location: String!
}

input EducationCreateManyInput {
  create: [EducationCreateInput!]
}

type EducationEdge {
  node: Education!
  cursor: String!
}

enum EducationOrderByInput {
  fieldOfStudy_ASC
  fieldOfStudy_DESC
  dateEnded_ASC
  dateEnded_DESC
  name_ASC
  name_DESC
  location_ASC
  location_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EducationPreviousValues {
  fieldOfStudy: String!
  dateEnded: String!
  name: String!
  location: String!
}

input EducationScalarWhereInput {
  fieldOfStudy: String
  fieldOfStudy_not: String
  fieldOfStudy_in: [String!]
  fieldOfStudy_not_in: [String!]
  fieldOfStudy_lt: String
  fieldOfStudy_lte: String
  fieldOfStudy_gt: String
  fieldOfStudy_gte: String
  fieldOfStudy_contains: String
  fieldOfStudy_not_contains: String
  fieldOfStudy_starts_with: String
  fieldOfStudy_not_starts_with: String
  fieldOfStudy_ends_with: String
  fieldOfStudy_not_ends_with: String
  dateEnded: String
  dateEnded_not: String
  dateEnded_in: [String!]
  dateEnded_not_in: [String!]
  dateEnded_lt: String
  dateEnded_lte: String
  dateEnded_gt: String
  dateEnded_gte: String
  dateEnded_contains: String
  dateEnded_not_contains: String
  dateEnded_starts_with: String
  dateEnded_not_starts_with: String
  dateEnded_ends_with: String
  dateEnded_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  AND: [EducationScalarWhereInput!]
  OR: [EducationScalarWhereInput!]
  NOT: [EducationScalarWhereInput!]
}

type EducationSubscriptionPayload {
  mutation: MutationType!
  node: Education
  updatedFields: [String!]
  previousValues: EducationPreviousValues
}

input EducationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: EducationWhereInput
  AND: [EducationSubscriptionWhereInput!]
  OR: [EducationSubscriptionWhereInput!]
  NOT: [EducationSubscriptionWhereInput!]
}

input EducationUpdateManyDataInput {
  fieldOfStudy: String
  dateEnded: String
  name: String
  location: String
}

input EducationUpdateManyInput {
  create: [EducationCreateInput!]
  deleteMany: [EducationScalarWhereInput!]
  updateMany: [EducationUpdateManyWithWhereNestedInput!]
}

input EducationUpdateManyMutationInput {
  fieldOfStudy: String
  dateEnded: String
  name: String
  location: String
}

input EducationUpdateManyWithWhereNestedInput {
  where: EducationScalarWhereInput!
  data: EducationUpdateManyDataInput!
}

input EducationWhereInput {
  fieldOfStudy: String
  fieldOfStudy_not: String
  fieldOfStudy_in: [String!]
  fieldOfStudy_not_in: [String!]
  fieldOfStudy_lt: String
  fieldOfStudy_lte: String
  fieldOfStudy_gt: String
  fieldOfStudy_gte: String
  fieldOfStudy_contains: String
  fieldOfStudy_not_contains: String
  fieldOfStudy_starts_with: String
  fieldOfStudy_not_starts_with: String
  fieldOfStudy_ends_with: String
  fieldOfStudy_not_ends_with: String
  dateEnded: String
  dateEnded_not: String
  dateEnded_in: [String!]
  dateEnded_not_in: [String!]
  dateEnded_lt: String
  dateEnded_lte: String
  dateEnded_gt: String
  dateEnded_gte: String
  dateEnded_contains: String
  dateEnded_not_contains: String
  dateEnded_starts_with: String
  dateEnded_not_starts_with: String
  dateEnded_ends_with: String
  dateEnded_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  AND: [EducationWhereInput!]
  OR: [EducationWhereInput!]
  NOT: [EducationWhereInput!]
}

type General {
  github: String!
  firstName: String!
  lastName: String!
  address: String!
  phoneNumber: String!
  email: String!
}

type GeneralConnection {
  pageInfo: PageInfo!
  edges: [GeneralEdge]!
  aggregate: AggregateGeneral!
}

input GeneralCreateInput {
  github: String!
  firstName: String!
  lastName: String!
  address: String!
  phoneNumber: String!
  email: String!
}

input GeneralCreateOneInput {
  create: GeneralCreateInput
}

type GeneralEdge {
  node: General!
  cursor: String!
}

enum GeneralOrderByInput {
  github_ASC
  github_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  address_ASC
  address_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GeneralPreviousValues {
  github: String!
  firstName: String!
  lastName: String!
  address: String!
  phoneNumber: String!
  email: String!
}

type GeneralSubscriptionPayload {
  mutation: MutationType!
  node: General
  updatedFields: [String!]
  previousValues: GeneralPreviousValues
}

input GeneralSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GeneralWhereInput
  AND: [GeneralSubscriptionWhereInput!]
  OR: [GeneralSubscriptionWhereInput!]
  NOT: [GeneralSubscriptionWhereInput!]
}

input GeneralUpdateDataInput {
  github: String
  firstName: String
  lastName: String
  address: String
  phoneNumber: String
  email: String
}

input GeneralUpdateManyMutationInput {
  github: String
  firstName: String
  lastName: String
  address: String
  phoneNumber: String
  email: String
}

input GeneralUpdateOneRequiredInput {
  create: GeneralCreateInput
  update: GeneralUpdateDataInput
  upsert: GeneralUpsertNestedInput
}

input GeneralUpsertNestedInput {
  update: GeneralUpdateDataInput!
  create: GeneralCreateInput!
}

input GeneralWhereInput {
  github: String
  github_not: String
  github_in: [String!]
  github_not_in: [String!]
  github_lt: String
  github_lte: String
  github_gt: String
  github_gte: String
  github_contains: String
  github_not_contains: String
  github_starts_with: String
  github_not_starts_with: String
  github_ends_with: String
  github_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  phoneNumber: String
  phoneNumber_not: String
  phoneNumber_in: [String!]
  phoneNumber_not_in: [String!]
  phoneNumber_lt: String
  phoneNumber_lte: String
  phoneNumber_gt: String
  phoneNumber_gte: String
  phoneNumber_contains: String
  phoneNumber_not_contains: String
  phoneNumber_starts_with: String
  phoneNumber_not_starts_with: String
  phoneNumber_ends_with: String
  phoneNumber_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  AND: [GeneralWhereInput!]
  OR: [GeneralWhereInput!]
  NOT: [GeneralWhereInput!]
}

type Hobby {
  name: String!
  icon: String!
  link: String
}

type HobbyConnection {
  pageInfo: PageInfo!
  edges: [HobbyEdge]!
  aggregate: AggregateHobby!
}

input HobbyCreateInput {
  name: String!
  icon: String!
  link: String
}

input HobbyCreateManyInput {
  create: [HobbyCreateInput!]
}

type HobbyEdge {
  node: Hobby!
  cursor: String!
}

enum HobbyOrderByInput {
  name_ASC
  name_DESC
  icon_ASC
  icon_DESC
  link_ASC
  link_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type HobbyPreviousValues {
  name: String!
  icon: String!
  link: String
}

input HobbyScalarWhereInput {
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  icon: String
  icon_not: String
  icon_in: [String!]
  icon_not_in: [String!]
  icon_lt: String
  icon_lte: String
  icon_gt: String
  icon_gte: String
  icon_contains: String
  icon_not_contains: String
  icon_starts_with: String
  icon_not_starts_with: String
  icon_ends_with: String
  icon_not_ends_with: String
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  AND: [HobbyScalarWhereInput!]
  OR: [HobbyScalarWhereInput!]
  NOT: [HobbyScalarWhereInput!]
}

type HobbySubscriptionPayload {
  mutation: MutationType!
  node: Hobby
  updatedFields: [String!]
  previousValues: HobbyPreviousValues
}

input HobbySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HobbyWhereInput
  AND: [HobbySubscriptionWhereInput!]
  OR: [HobbySubscriptionWhereInput!]
  NOT: [HobbySubscriptionWhereInput!]
}

input HobbyUpdateManyDataInput {
  name: String
  icon: String
  link: String
}

input HobbyUpdateManyInput {
  create: [HobbyCreateInput!]
  deleteMany: [HobbyScalarWhereInput!]
  updateMany: [HobbyUpdateManyWithWhereNestedInput!]
}

input HobbyUpdateManyMutationInput {
  name: String
  icon: String
  link: String
}

input HobbyUpdateManyWithWhereNestedInput {
  where: HobbyScalarWhereInput!
  data: HobbyUpdateManyDataInput!
}

input HobbyWhereInput {
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  icon: String
  icon_not: String
  icon_in: [String!]
  icon_not_in: [String!]
  icon_lt: String
  icon_lte: String
  icon_gt: String
  icon_gte: String
  icon_contains: String
  icon_not_contains: String
  icon_starts_with: String
  icon_not_starts_with: String
  icon_ends_with: String
  icon_not_ends_with: String
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  AND: [HobbyWhereInput!]
  OR: [HobbyWhereInput!]
  NOT: [HobbyWhereInput!]
}

type Job {
  position: String!
  company: String!
  location: String!
  startDate: String!
  endDate: String!
  tasks: [String!]!
}

type JobConnection {
  pageInfo: PageInfo!
  edges: [JobEdge]!
  aggregate: AggregateJob!
}

input JobCreateInput {
  position: String!
  company: String!
  location: String!
  startDate: String!
  endDate: String!
  tasks: JobCreatetasksInput
}

input JobCreateManyInput {
  create: [JobCreateInput!]
}

input JobCreatetasksInput {
  set: [String!]
}

type JobEdge {
  node: Job!
  cursor: String!
}

enum JobOrderByInput {
  position_ASC
  position_DESC
  company_ASC
  company_DESC
  location_ASC
  location_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type JobPreviousValues {
  position: String!
  company: String!
  location: String!
  startDate: String!
  endDate: String!
  tasks: [String!]!
}

input JobScalarWhereInput {
  position: String
  position_not: String
  position_in: [String!]
  position_not_in: [String!]
  position_lt: String
  position_lte: String
  position_gt: String
  position_gte: String
  position_contains: String
  position_not_contains: String
  position_starts_with: String
  position_not_starts_with: String
  position_ends_with: String
  position_not_ends_with: String
  company: String
  company_not: String
  company_in: [String!]
  company_not_in: [String!]
  company_lt: String
  company_lte: String
  company_gt: String
  company_gte: String
  company_contains: String
  company_not_contains: String
  company_starts_with: String
  company_not_starts_with: String
  company_ends_with: String
  company_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  startDate: String
  startDate_not: String
  startDate_in: [String!]
  startDate_not_in: [String!]
  startDate_lt: String
  startDate_lte: String
  startDate_gt: String
  startDate_gte: String
  startDate_contains: String
  startDate_not_contains: String
  startDate_starts_with: String
  startDate_not_starts_with: String
  startDate_ends_with: String
  startDate_not_ends_with: String
  endDate: String
  endDate_not: String
  endDate_in: [String!]
  endDate_not_in: [String!]
  endDate_lt: String
  endDate_lte: String
  endDate_gt: String
  endDate_gte: String
  endDate_contains: String
  endDate_not_contains: String
  endDate_starts_with: String
  endDate_not_starts_with: String
  endDate_ends_with: String
  endDate_not_ends_with: String
  AND: [JobScalarWhereInput!]
  OR: [JobScalarWhereInput!]
  NOT: [JobScalarWhereInput!]
}

type JobSubscriptionPayload {
  mutation: MutationType!
  node: Job
  updatedFields: [String!]
  previousValues: JobPreviousValues
}

input JobSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: JobWhereInput
  AND: [JobSubscriptionWhereInput!]
  OR: [JobSubscriptionWhereInput!]
  NOT: [JobSubscriptionWhereInput!]
}

input JobUpdateManyDataInput {
  position: String
  company: String
  location: String
  startDate: String
  endDate: String
  tasks: JobUpdatetasksInput
}

input JobUpdateManyInput {
  create: [JobCreateInput!]
  deleteMany: [JobScalarWhereInput!]
  updateMany: [JobUpdateManyWithWhereNestedInput!]
}

input JobUpdateManyMutationInput {
  position: String
  company: String
  location: String
  startDate: String
  endDate: String
  tasks: JobUpdatetasksInput
}

input JobUpdateManyWithWhereNestedInput {
  where: JobScalarWhereInput!
  data: JobUpdateManyDataInput!
}

input JobUpdatetasksInput {
  set: [String!]
}

input JobWhereInput {
  position: String
  position_not: String
  position_in: [String!]
  position_not_in: [String!]
  position_lt: String
  position_lte: String
  position_gt: String
  position_gte: String
  position_contains: String
  position_not_contains: String
  position_starts_with: String
  position_not_starts_with: String
  position_ends_with: String
  position_not_ends_with: String
  company: String
  company_not: String
  company_in: [String!]
  company_not_in: [String!]
  company_lt: String
  company_lte: String
  company_gt: String
  company_gte: String
  company_contains: String
  company_not_contains: String
  company_starts_with: String
  company_not_starts_with: String
  company_ends_with: String
  company_not_ends_with: String
  location: String
  location_not: String
  location_in: [String!]
  location_not_in: [String!]
  location_lt: String
  location_lte: String
  location_gt: String
  location_gte: String
  location_contains: String
  location_not_contains: String
  location_starts_with: String
  location_not_starts_with: String
  location_ends_with: String
  location_not_ends_with: String
  startDate: String
  startDate_not: String
  startDate_in: [String!]
  startDate_not_in: [String!]
  startDate_lt: String
  startDate_lte: String
  startDate_gt: String
  startDate_gte: String
  startDate_contains: String
  startDate_not_contains: String
  startDate_starts_with: String
  startDate_not_starts_with: String
  startDate_ends_with: String
  startDate_not_ends_with: String
  endDate: String
  endDate_not: String
  endDate_in: [String!]
  endDate_not_in: [String!]
  endDate_lt: String
  endDate_lte: String
  endDate_gt: String
  endDate_gte: String
  endDate_contains: String
  endDate_not_contains: String
  endDate_starts_with: String
  endDate_not_starts_with: String
  endDate_ends_with: String
  endDate_not_ends_with: String
  AND: [JobWhereInput!]
  OR: [JobWhereInput!]
  NOT: [JobWhereInput!]
}

type Language {
  language: String!
  level: String!
}

type LanguageConnection {
  pageInfo: PageInfo!
  edges: [LanguageEdge]!
  aggregate: AggregateLanguage!
}

input LanguageCreateInput {
  language: String!
  level: String!
}

input LanguageCreateManyInput {
  create: [LanguageCreateInput!]
}

type LanguageEdge {
  node: Language!
  cursor: String!
}

enum LanguageOrderByInput {
  language_ASC
  language_DESC
  level_ASC
  level_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type LanguagePreviousValues {
  language: String!
  level: String!
}

input LanguageScalarWhereInput {
  language: String
  language_not: String
  language_in: [String!]
  language_not_in: [String!]
  language_lt: String
  language_lte: String
  language_gt: String
  language_gte: String
  language_contains: String
  language_not_contains: String
  language_starts_with: String
  language_not_starts_with: String
  language_ends_with: String
  language_not_ends_with: String
  level: String
  level_not: String
  level_in: [String!]
  level_not_in: [String!]
  level_lt: String
  level_lte: String
  level_gt: String
  level_gte: String
  level_contains: String
  level_not_contains: String
  level_starts_with: String
  level_not_starts_with: String
  level_ends_with: String
  level_not_ends_with: String
  AND: [LanguageScalarWhereInput!]
  OR: [LanguageScalarWhereInput!]
  NOT: [LanguageScalarWhereInput!]
}

type LanguageSubscriptionPayload {
  mutation: MutationType!
  node: Language
  updatedFields: [String!]
  previousValues: LanguagePreviousValues
}

input LanguageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LanguageWhereInput
  AND: [LanguageSubscriptionWhereInput!]
  OR: [LanguageSubscriptionWhereInput!]
  NOT: [LanguageSubscriptionWhereInput!]
}

input LanguageUpdateManyDataInput {
  language: String
  level: String
}

input LanguageUpdateManyInput {
  create: [LanguageCreateInput!]
  deleteMany: [LanguageScalarWhereInput!]
  updateMany: [LanguageUpdateManyWithWhereNestedInput!]
}

input LanguageUpdateManyMutationInput {
  language: String
  level: String
}

input LanguageUpdateManyWithWhereNestedInput {
  where: LanguageScalarWhereInput!
  data: LanguageUpdateManyDataInput!
}

input LanguageWhereInput {
  language: String
  language_not: String
  language_in: [String!]
  language_not_in: [String!]
  language_lt: String
  language_lte: String
  language_gt: String
  language_gte: String
  language_contains: String
  language_not_contains: String
  language_starts_with: String
  language_not_starts_with: String
  language_ends_with: String
  language_not_ends_with: String
  level: String
  level_not: String
  level_in: [String!]
  level_not_in: [String!]
  level_lt: String
  level_lte: String
  level_gt: String
  level_gte: String
  level_contains: String
  level_not_contains: String
  level_starts_with: String
  level_not_starts_with: String
  level_ends_with: String
  level_not_ends_with: String
  AND: [LanguageWhereInput!]
  OR: [LanguageWhereInput!]
  NOT: [LanguageWhereInput!]
}

scalar Long

type Mutation {
  createEducation(data: EducationCreateInput!): Education!
  updateManyEducations(data: EducationUpdateManyMutationInput!, where: EducationWhereInput): BatchPayload!
  deleteManyEducations(where: EducationWhereInput): BatchPayload!
  createGeneral(data: GeneralCreateInput!): General!
  updateManyGenerals(data: GeneralUpdateManyMutationInput!, where: GeneralWhereInput): BatchPayload!
  deleteManyGenerals(where: GeneralWhereInput): BatchPayload!
  createHobby(data: HobbyCreateInput!): Hobby!
  updateManyHobbies(data: HobbyUpdateManyMutationInput!, where: HobbyWhereInput): BatchPayload!
  deleteManyHobbies(where: HobbyWhereInput): BatchPayload!
  createJob(data: JobCreateInput!): Job!
  updateManyJobs(data: JobUpdateManyMutationInput!, where: JobWhereInput): BatchPayload!
  deleteManyJobs(where: JobWhereInput): BatchPayload!
  createLanguage(data: LanguageCreateInput!): Language!
  updateManyLanguages(data: LanguageUpdateManyMutationInput!, where: LanguageWhereInput): BatchPayload!
  deleteManyLanguages(where: LanguageWhereInput): BatchPayload!
  createResume(data: ResumeCreateInput!): Resume!
  updateResume(data: ResumeUpdateInput!, where: ResumeWhereUniqueInput!): Resume
  updateManyResumes(data: ResumeUpdateManyMutationInput!, where: ResumeWhereInput): BatchPayload!
  upsertResume(where: ResumeWhereUniqueInput!, create: ResumeCreateInput!, update: ResumeUpdateInput!): Resume!
  deleteResume(where: ResumeWhereUniqueInput!): Resume
  deleteManyResumes(where: ResumeWhereInput): BatchPayload!
  createSkill(data: SkillCreateInput!): Skill!
  updateManySkills(data: SkillUpdateManyMutationInput!, where: SkillWhereInput): BatchPayload!
  deleteManySkills(where: SkillWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  educations(where: EducationWhereInput, orderBy: EducationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Education]!
  educationsConnection(where: EducationWhereInput, orderBy: EducationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EducationConnection!
  generals(where: GeneralWhereInput, orderBy: GeneralOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [General]!
  generalsConnection(where: GeneralWhereInput, orderBy: GeneralOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GeneralConnection!
  hobbies(where: HobbyWhereInput, orderBy: HobbyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hobby]!
  hobbiesConnection(where: HobbyWhereInput, orderBy: HobbyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HobbyConnection!
  jobs(where: JobWhereInput, orderBy: JobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Job]!
  jobsConnection(where: JobWhereInput, orderBy: JobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): JobConnection!
  languages(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Language]!
  languagesConnection(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LanguageConnection!
  resume(where: ResumeWhereUniqueInput!): Resume
  resumes(where: ResumeWhereInput, orderBy: ResumeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resume]!
  resumesConnection(where: ResumeWhereInput, orderBy: ResumeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ResumeConnection!
  skills(where: SkillWhereInput, orderBy: SkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Skill]!
  skillsConnection(where: SkillWhereInput, orderBy: SkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SkillConnection!
  node(id: ID!): Node
}

type Resume {
  id: ID!
  urlSlug: String!
  themeColor: String!
  general: General!
  education(where: EducationWhereInput, orderBy: EducationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Education!]
  workHistory(where: JobWhereInput, orderBy: JobOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Job!]
  languages(where: LanguageWhereInput, orderBy: LanguageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Language!]
  hobbies(where: HobbyWhereInput, orderBy: HobbyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Hobby!]
  technicalSkills(where: SkillWhereInput, orderBy: SkillOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Skill!]
}

type ResumeConnection {
  pageInfo: PageInfo!
  edges: [ResumeEdge]!
  aggregate: AggregateResume!
}

input ResumeCreateInput {
  urlSlug: String!
  themeColor: String!
  general: GeneralCreateOneInput!
  education: EducationCreateManyInput
  workHistory: JobCreateManyInput
  languages: LanguageCreateManyInput
  hobbies: HobbyCreateManyInput
  technicalSkills: SkillCreateManyInput
}

type ResumeEdge {
  node: Resume!
  cursor: String!
}

enum ResumeOrderByInput {
  id_ASC
  id_DESC
  urlSlug_ASC
  urlSlug_DESC
  themeColor_ASC
  themeColor_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ResumePreviousValues {
  id: ID!
  urlSlug: String!
  themeColor: String!
}

type ResumeSubscriptionPayload {
  mutation: MutationType!
  node: Resume
  updatedFields: [String!]
  previousValues: ResumePreviousValues
}

input ResumeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ResumeWhereInput
  AND: [ResumeSubscriptionWhereInput!]
  OR: [ResumeSubscriptionWhereInput!]
  NOT: [ResumeSubscriptionWhereInput!]
}

input ResumeUpdateInput {
  urlSlug: String
  themeColor: String
  general: GeneralUpdateOneRequiredInput
  education: EducationUpdateManyInput
  workHistory: JobUpdateManyInput
  languages: LanguageUpdateManyInput
  hobbies: HobbyUpdateManyInput
  technicalSkills: SkillUpdateManyInput
}

input ResumeUpdateManyMutationInput {
  urlSlug: String
  themeColor: String
}

input ResumeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  urlSlug: String
  urlSlug_not: String
  urlSlug_in: [String!]
  urlSlug_not_in: [String!]
  urlSlug_lt: String
  urlSlug_lte: String
  urlSlug_gt: String
  urlSlug_gte: String
  urlSlug_contains: String
  urlSlug_not_contains: String
  urlSlug_starts_with: String
  urlSlug_not_starts_with: String
  urlSlug_ends_with: String
  urlSlug_not_ends_with: String
  themeColor: String
  themeColor_not: String
  themeColor_in: [String!]
  themeColor_not_in: [String!]
  themeColor_lt: String
  themeColor_lte: String
  themeColor_gt: String
  themeColor_gte: String
  themeColor_contains: String
  themeColor_not_contains: String
  themeColor_starts_with: String
  themeColor_not_starts_with: String
  themeColor_ends_with: String
  themeColor_not_ends_with: String
  general: GeneralWhereInput
  education_every: EducationWhereInput
  education_some: EducationWhereInput
  education_none: EducationWhereInput
  workHistory_every: JobWhereInput
  workHistory_some: JobWhereInput
  workHistory_none: JobWhereInput
  languages_every: LanguageWhereInput
  languages_some: LanguageWhereInput
  languages_none: LanguageWhereInput
  hobbies_every: HobbyWhereInput
  hobbies_some: HobbyWhereInput
  hobbies_none: HobbyWhereInput
  technicalSkills_every: SkillWhereInput
  technicalSkills_some: SkillWhereInput
  technicalSkills_none: SkillWhereInput
  AND: [ResumeWhereInput!]
  OR: [ResumeWhereInput!]
  NOT: [ResumeWhereInput!]
}

input ResumeWhereUniqueInput {
  id: ID
  urlSlug: String
}

type Skill {
  name: String!
  level: Float!
}

type SkillConnection {
  pageInfo: PageInfo!
  edges: [SkillEdge]!
  aggregate: AggregateSkill!
}

input SkillCreateInput {
  name: String!
  level: Float!
}

input SkillCreateManyInput {
  create: [SkillCreateInput!]
}

type SkillEdge {
  node: Skill!
  cursor: String!
}

enum SkillOrderByInput {
  name_ASC
  name_DESC
  level_ASC
  level_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SkillPreviousValues {
  name: String!
  level: Float!
}

input SkillScalarWhereInput {
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  level: Float
  level_not: Float
  level_in: [Float!]
  level_not_in: [Float!]
  level_lt: Float
  level_lte: Float
  level_gt: Float
  level_gte: Float
  AND: [SkillScalarWhereInput!]
  OR: [SkillScalarWhereInput!]
  NOT: [SkillScalarWhereInput!]
}

type SkillSubscriptionPayload {
  mutation: MutationType!
  node: Skill
  updatedFields: [String!]
  previousValues: SkillPreviousValues
}

input SkillSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: SkillWhereInput
  AND: [SkillSubscriptionWhereInput!]
  OR: [SkillSubscriptionWhereInput!]
  NOT: [SkillSubscriptionWhereInput!]
}

input SkillUpdateManyDataInput {
  name: String
  level: Float
}

input SkillUpdateManyInput {
  create: [SkillCreateInput!]
  deleteMany: [SkillScalarWhereInput!]
  updateMany: [SkillUpdateManyWithWhereNestedInput!]
}

input SkillUpdateManyMutationInput {
  name: String
  level: Float
}

input SkillUpdateManyWithWhereNestedInput {
  where: SkillScalarWhereInput!
  data: SkillUpdateManyDataInput!
}

input SkillWhereInput {
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  level: Float
  level_not: Float
  level_in: [Float!]
  level_not_in: [Float!]
  level_lt: Float
  level_lte: Float
  level_gt: Float
  level_gte: Float
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  NOT: [SkillWhereInput!]
}

type Subscription {
  education(where: EducationSubscriptionWhereInput): EducationSubscriptionPayload
  general(where: GeneralSubscriptionWhereInput): GeneralSubscriptionPayload
  hobby(where: HobbySubscriptionWhereInput): HobbySubscriptionPayload
  job(where: JobSubscriptionWhereInput): JobSubscriptionPayload
  language(where: LanguageSubscriptionWhereInput): LanguageSubscriptionPayload
  resume(where: ResumeSubscriptionWhereInput): ResumeSubscriptionPayload
  skill(where: SkillSubscriptionWhereInput): SkillSubscriptionPayload
}
`
      }
    